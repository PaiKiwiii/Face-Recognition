import numpy as np
import pandas as pd
import cv2
import redis

# insight face
from insightface.app import FaceAnalysis
from sklearn.metrics import pairwise


# Connect to Redis Client
hostname = 'redis-15807.c15.us-east-1-2.ec2.cloud.redislabs.com'
portnumber = '15807'
password = '4t3qO54RKOJUrXJZUMfosvD1XwqbzPEn'

r = redis.StrictRedis(host = hostname,
                      port = portnumber,
                      password = password)

# configure face analysis
faceapp = FaceAnalysis(name = 'buffalo_sc', root = 'insightface_model',
                       providers = ['CPUExecutionProvider'])
faceapp.prepare(ctx_id = 0, det_size = (640, 640), det_thresh = 0.5)

def retrieve_data(default_values):
    retrieve_dict = r.hgetall('academy:register')
    print("Retrieved dictionary:", retrieve_dict)  # Debug print
    
    # Decode bytes to strings using 'latin-1' encoding
    decoded_dict = {key.decode('latin-1'): value.decode('latin-1') for key, value in retrieve_dict.items()}
    
    # Create lists to store extracted data
    names = []
    departments = []
    id_numbers = []
    courses = []
    facial_features = []
    rfids = []  # New list for RFID
    
    # Iterate over the decoded dictionary items
    for key, value in decoded_dict.items():
        parts = key.split('@')
        if len(parts) != 2:
            print(f"Ignoring invalid entry: {key}")
            continue
        
        name, role = parts
        role_parts = role.split()
        
        if len(role_parts) < 3:
            print(f"Ignoring invalid role: {role}")
            continue
        
        department = role_parts[0]
        id_number = role_parts[1]
        course = ' '.join(role_parts[2:])
        
        # Extract facial features from value (assuming it's stored after a separator)
        facial_feature = value.split(':')[1] if ':' in value else ''
        rfid_data = value.split(';')[1] if ';' in value else ''
        
        # Append extracted data to lists
        names.append(name)
        departments.append(department)
        id_numbers.append(id_number)
        courses.append(course)
        facial_features.append(facial_feature)
        rfids.append(rfid_data)  # Use rfid_data here instead of rfid_data
    
    # Create DataFrame from extracted lists
    retrieve_df = pd.DataFrame({
        'Name': names,
        'Department': departments,
        'ID Number': id_numbers,
        'Course': courses,
        'facial_features': facial_features,
        'RFID': rfids  # Add the new column for RFID
    })
    
    # Replace 'None' values with default values
    retrieve_df['Name'].fillna(value=default_values['Name'], inplace=True)
    retrieve_df['Department'].fillna(value=default_values['Department'], inplace=True)
    retrieve_df['ID Number'].fillna(value=default_values['ID Number'], inplace=True)
    retrieve_df['Course'].fillna(value=default_values['Course'], inplace=True)
    retrieve_df['RFID'].fillna(value=default_values.get('RFID', ''), inplace=True)  # Fill missing RFID data with default
    
    return retrieve_df





#ML Search Algorithm
def ml_search_algorithm(dataframe, feature_column, test_vector, name_role = ['Name', 'Role'], thresh = 0.5):
    """
    cosine similarity base search algorithm
    """
    # step-1 : take the the dataframe (collection of the data)
    dataframe = dataframe.copy()
    # step-2: Index face embedding form the dataframe and convert into array
    X_list = dataframe[feature_column].tolist()
    x = np.asarray(X_list)
    # step-3: Cal.cosine similarity 
    similar = pairwise.cosine_similarity(x, test_vector.reshape(1, -1))
    similar_arr = np.array(similar).flatten()
    dataframe['cosine'] = similar_arr
    # step-4: filter the data
    data_filter = dataframe.query(f'cosine >= {thresh}')
    if len(data_filter) > 0:
        # step-5: get the person name
        data_filter.reset_index(drop = True, inplace = True)
        argmax = data_filter['cosine'].argmax()
        person_name, person_role = data_filter.loc[argmax][name_role]
    else:
        person_name = 'Unknown'
        person_role = 'Unknown'

    return person_name, person_role

def face_prediction(test_image, dataframe, feature_column, name_role = ['Name', 'Role'], thresh = 0.5):
    # step-1: take  the test image and apply insight face
    results = faceapp.get(test_image)
    test_copy = test_image.copy()
    # step-2: use for loop and extract each embedding and pass to ml_search_algorithm
    for res in results:
        x1, y1, x2, y2 = res['bbox'].astype(int)
        embeddings = res['embedding']
        person_name, person_role = ml_search_algorithm(dataframe,
                                                       feature_column,
                                                       test_vector = embeddings,
                                                       name_role = name_role,
                                                       thresh = thresh)
        if person_name == 'Unknown':
            color = (0, 0, 255) #bgr
        else:
            color = (0, 255, 0)
            
        cv2.rectangle(test_copy, (x1, y1), (x2, y2), color)
        text_gen = person_name
        cv2.putText(test_copy,text_gen, (x1, y1), cv2.FONT_HERSHEY_DUPLEX, 0.7, color, 2)

    return test_copy

